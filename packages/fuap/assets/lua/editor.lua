---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hange.
--- DateTime: 2020/9/24 5:13 PM
---
---
---
require("import")
import "net.fusionapp.core.util.ThreadSupport"
function fiximport(path, classes)
    require "import"
    import "android.app.*"
    import "android.os.*"
    import "android.widget.*"
    import "android.view.*"
    import "net.fusionapp.ui.view.luaeditor.myopicmobile.textwarrior.common.*"
    local searchpath = path:gsub("[^/]+%.lua", "?.lua;") .. path:gsub("[^/]+%.lua", "?.aly;")
    local cache = {}
    function checkclass(path, ret)

        if cache[path] then
            return
        end
        cache[path] = true
        local f = io.open(path)
        local str = f:read("a")
        f:close()
        if not str then
            return
        end
        for s, e, t in str:gfind("(import \"[%w%.]+%*\")") do
            --local p=package.searchpath(t,searchpath)
            --print(t,p)
        end
        for s, e, t in str:gfind("import \"([%w%.]+)\"") do
            local p = package.searchpath(t, searchpath)
            if p then
                checkclass(p, ret)
            end
        end
        local lex = LuaLexer(str)
        local buf = {}
        local last = nil
        while true do
            local t = lex.advance()
            if not t then
                break
            end
            if last ~= LuaTokenTypes.DOT and t == LuaTokenTypes.NAME then
                local text = lex.yytext()
                buf[text] = true
            end
            last = t
        end
        table.sort(buf)

        for k, v in pairs(buf) do
            k = "[%.$]" .. k .. "$"
            for i=0,#classes-1 do
                local b=tostring(classes[i])
                if string.find(b, k) then
                    if cache[b] == nil then
                        pcall(function()
                            table.insert(ret,classes[i].getName())
                        end)
                        cache[b] = true
                    end
                end

            end
        end
    end

    local ret = {}
    checkclass(path, ret)

    return String(ret)
end

function getStructureList(code)
    import "java.util.ArrayList"
    local fs = ArrayList();
    local indexs = ArrayList();
    local result = ArrayList();
    for s, i in code:gmatch("([%w%._]* *=? *function *[%w%._]*%b())()") do
        i = utf8.len(code, 1, i) - 1
        s = s:gsub("^ +", "")
        fs.add(s);
        indexs.add(i)
    end
    result.add(fs);
    result.add(indexs)
    return result
end


function execAddNames(classes,editor)
    local mThread = ThreadSupport()
    mThread.setRunnable(function(t, args)
        local function adds(classes)
            local ms = { "onCreate",
                "onStart",
                "onResume",
                "onPause",
                "onStop",
                "onDestroy",
                "onMenuItemClick",
                "onDrawerListItemClick",
                "onActivityResult",
                "onResult",
                "onSearchEvent",
                "onFloatingActionButtonClick",
                "onClick",
                "onTouch",
                "onLongClick",
                "onItemClick",
                "onItemLongClick",
            }
            local buf = String[#ms + #classes]
            for k, v in ipairs(ms) do
                buf[k - 1] = v
            end
            local l = #ms
            for k, v in ipairs(classes) do
                buf[l + k - 1] = string.match(v, "%w+$")
            end
            return buf
        end
        buf=adds(args[0]);
        t.call(function()
            args[1].addNames(buf)
        end)
    end);
    mThread.start({classes,editor})
end